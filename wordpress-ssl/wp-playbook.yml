---
- hosts: webservers
  gather_facts: yes
  become: true
  become_user: root

  vars_files:
    - variables.yml
    
  tasks:
    - name: get ip address
      shell: hostname  -I | cut -f1 -d' '
      register: ip_address
    - set_fact:
        ip_address={{ ip_address.stdout }}

    - name: install packages
      apt:
        name: [ 'nginx', 'mysql-server', 'python3-pymysql', 'php-fpm', 'php-mysql', 'php-curl', 'php-gd', 'php-intl', 'php-mbstring', 'php-soap', 'php-xml', 'php-xmlrpc', 'php-zip' ]
        update_cache: yes
        state: latest

    - name: create wordpress database
      mysql_db:
        name: "{{ db_name }}"
        state: present
        login_user: root
        login_password: "{{ db_pw }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
            
    - name: create wordpress db_user and grant permissions
      mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_pw }}"
        priv: "{{ db_name }}.*:ALL"
        state: present
        login_user: root
        login_password: "{{ db_pw }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        
    - name: download wp-cli
      get_url:
        url="https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar"
        dest="~/"

    - name: touch ~/wp-cli.phar and make executable
      ansible.builtin.file:
        path: ~/wp-cli.phar
        state: touch
        mode: +x

    - name: move wp-cli
      command: mv ~/wp-cli.phar /usr/local/bin/wp-cli

    - name: create a website directory
      ansible.builtin.file:
        path: /var/www/wordpress
        state: directory

    - name: download wordpress
      command: wp-cli core download
        --path="/var/www/wordpress"
        --allow-root

    - name: Configure WordPress
      command: wp-cli config create
        --path="/var/www/wordpress"
        --dbname="{{ db_name }}"
        --dbuser="{{ db_user }}"
        --dbpass="{{ db_pw }}"
        --locale=en_DB
        --allow-root

    - name: install wordpress tables
      command: wp-cli core install
        --path="/var/www/wordpress"
        --url="{{ ip_address }}"
        --title="{{ domain_url }}"
        --admin_user="{{ db_user }}"
        --admin_password="{{ db_pw }}"
        --admin_email=email@gmail.com
        --allow-root

    - name: change websites ownership
      ansible.builtin.file:
        path: /var/www/wordpress
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
    
    - name: nginx config
      template:
        src: "nginx/nginx.conf.j2"
        dest: "/etc/nginx/sites-available/{{ nginx_conf }}"

    - name: unlink default site
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: link new config
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/{{ nginx_conf }}"
        dest: "/etc/nginx/sites-enabled/{{ nginx_conf }}"
        state: link

    - name: install easy-rsa and openssl
      apt:
        name: [ 'easy-rsa', 'openssl' ]
        update_cache: yes
        state: latest

    - name: mkdir easy-rsa directory
      shell: 'mkdir /home/ubuntu/easy-rsa'

    - name: create symbolic link 
      shell: 'ln -s /usr/share/easy-rsa/* /home/ubuntu/easy-rsa/'

    - name: change ownership
      shell: 'chmod 700 /home/ubuntu/easy-rsa/'

    - name: run init-pki
      shell: '/home/ubuntu/easy-rsa/easyrsa init-pki'

    - name: copy vars
      copy:
        src: easyrsa-vars
        dest: /home/ubuntu/easy-rsa/vars

    - name: build ca
      shell: '/home/ubuntu/easy-rsa/easyrsa build-ca nopass'

    - name: mkdir practice-csr
      shell: 'mkdir /home/ubuntu/practice-csr'

    - name: genrsa webserver.key
      shell: 'openssl genrsa -out /home/ubuntu/practice-csr/webserver.key'

    - name: gen req
      shell: 'openssl req -new -key /home/ubuntu/practice-csr/webserver.key -out /home/ubuntu/practice-csr/webserver.req -subj \
        /C=US/ST=New\ York/L=New\ York\ City/O=tahacodes/OU=IT/CN=www.webserver.local/emailAddress=admin@webserver.local'

    - name: import req
      shell: '/home/ubuntu/easy-rsa/easyrsa import-req /home/ubuntu/practice-csr/webserver.req webserver'

    - name: sing req
      shell: '/home/ubuntu/easy-rsa/easyrsa sign-req server webserver'

    - name: mkdir /etc/ssl/webserver
      shell: 'mkdir /etc/ssl/webserver'

    - name: copy webserver.crt
      shell: 'cp /home/ubuntu/pki/issued/webserver.crt /etc/ssl/webserver/'

    - name: copy webserver.key
      shell: 'cp /home/ubuntu/practice-csr/webserver.key /etc/ssl/webserver/'

    - name: restart nginx
      service: 
        name: nginx
        state: restarted